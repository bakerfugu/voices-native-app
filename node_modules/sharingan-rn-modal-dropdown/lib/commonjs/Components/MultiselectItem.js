"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _PressableTouch = _interopRequireDefault(require("./PressableTouch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultProps = {
  selectedColor: _constants.colors.primary,
  itemTextStyle: {},
  itemContainerStyle: {},
  rippleColor: 'rgba(0,0,0,0.1)',
  enableAvatar: false
};

const defaultAvatar = require('../assets/ddicon.png');

const MultiselectItem = ({
  item,
  selected,
  onSelect,
  selectedColor,
  itemTextStyle,
  itemContainerStyle,
  rippleColor,
  disabled,
  enableAvatar,
  avatarSize,
  disableSelectionTick,
  selectedItemTextStyle,
  selectedItemViewStyle
}) => {
  const {
    label,
    value,
    avatarSource
  } = item;

  const styles = _reactNative.StyleSheet.create({
    unselected: {
      color: _constants.colors.unselected,
      paddingLeft: 5
    },
    selected: {
      color: selectedColor,
      paddingLeft: 5
    },
    listView: {
      flex: 1,
      paddingVertical: 10,
      height: _constants.ITEMLAYOUT,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    iconView: {
      width: 30
    },
    textView: {
      alignItems: 'center',
      flexDirection: 'row'
    },
    avatarView: {
      backgroundColor: 'transparent'
    }
  });

  const handleSelectValue = () => {
    onSelect(value);
  };

  const getSelectedStyles = () => {
    if (!_lodash.default.isEmpty(selectedItemTextStyle)) {
      return { ...styles.selected,
        ...selectedItemTextStyle
      };
    } else return styles.selected;
  };

  return /*#__PURE__*/_react.default.createElement(_PressableTouch.default, {
    onPress: handleSelectValue,
    disabled: disabled,
    key: Math.random().toString(),
    rippleColor: rippleColor
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.listView, itemContainerStyle, selected.includes(value) ? selectedItemViewStyle : {}]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.textView
  }, enableAvatar && /*#__PURE__*/_react.default.createElement(_reactNativePaper.Avatar.Image, {
    size: avatarSize,
    style: styles.avatarView,
    source: avatarSource || defaultAvatar
  }), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [itemTextStyle, selected.includes(value) ? getSelectedStyles() : styles.unselected]
  }, label)), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconView
  }, selected.includes(value) && !disableSelectionTick ? /*#__PURE__*/_react.default.createElement(_MaterialCommunityIcons.default, {
    name: "check",
    size: 18,
    color: selectedColor
  }) : null)));
};

MultiselectItem.defaultProps = defaultProps;
var _default = MultiselectItem;
exports.default = _default;
//# sourceMappingURL=MultiselectItem.js.map
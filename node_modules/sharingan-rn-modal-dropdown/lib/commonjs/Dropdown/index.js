"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNativePaper = require("react-native-paper");

var _reactNative = require("react-native");

var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));

var _lodash = _interopRequireDefault(require("lodash"));

var _Item = _interopRequireDefault(require("../Components/Item"));

var _constants = require("../constants");

var _styles = _interopRequireDefault(require("../styles"));

var _util = require("../util");

var _EmptyList = _interopRequireDefault(require("../Components/EmptyList"));

var _PressableTouch = _interopRequireDefault(require("../Components/PressableTouch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const theme = { ..._reactNativePaper.DefaultTheme,
  roundness: 2,
  colors: { ..._reactNativePaper.DefaultTheme.colors,
    colors: {
      primary: '#6200ee',
      accent: '#03dac4',
      background: '#f6f6f6',
      surface: '#FFFFFF',
      error: '#B00020',
      text: '#000000',
      onBackground: '#000000',
      onSurface: '#000000',
      placeholder: 'rgba(0,0,0,0.54)',
      disabled: 'rgba(0,0,0,0.26)'
    }
  },
  dark: true
};

const Dropdown = props => {
  const {
    error,
    value,
    label,
    required,
    disabled,
    data,
    onChange,
    floating,
    enableSearch,
    primaryColor,
    elevation,
    borderRadius,
    activityIndicatorColor,
    searchPlaceholder,
    rippleColor,
    helperText,
    errorColor,
    itemTextStyle,
    itemContainerStyle,
    showLoader,
    animationIn = 'fadeIn',
    animationOut = 'fadeOut',
    supportedOrientations = ['portrait', 'landscape'],
    animationInTiming,
    animationOutTiming,
    parentDDContainerStyle,
    emptyListText,
    disableSort,
    enableAvatar,
    avatarSize,
    defaultSortOrder = 'asc',
    onBlur,
    paperTheme,
    textInputStyle,
    mainContainerStyle,
    underlineColor,
    disableSelectionTick,
    textInputPlaceholder,
    textInputPlaceholderColor,
    selectedItemTextStyle,
    selectedItemViewStyle,
    removeLabel,
    mode = 'flat'
  } = props;
  const [selected, setSelected] = (0, _react.useState)();
  const [labelv, setLabelV] = (0, _react.useState)('');
  const [isVisible, setIsVisible] = (0, _react.useState)(false);
  const [iconColor, setIconColor] = (0, _react.useState)('grey');
  const [options, setOptions] = (0, _react.useState)([]);
  const [hasError, setError] = (0, _react.useState)(false);
  const [contMeasure, setConMeasure] = (0, _react.useState)({
    vx: 0,
    vy: 0,
    vWidth: 0,
    vHeight: 0
  });
  const [dimension, setDimension] = (0, _react.useState)({
    dw: _util.deviceWidth,
    dh: _util.deviceHeight
  });
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const pViewRef = (0, _react.useRef)();
  const listRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    _reactNative.Dimensions.addEventListener('change', () => {
      setIsVisible(false);

      const {
        width,
        height
      } = _reactNative.Dimensions.get('window');

      setDimension({
        dw: width,
        dh: height
      });
      setIconColor('grey');
    });

    return () => {
      _reactNative.Dimensions.removeEventListener('change', () => {});
    };
  }, []);
  (0, _react.useEffect)(() => {
    if (!_lodash.default.isEmpty(data) && value) {
      const lFilter = _lodash.default.filter(data, {
        value: value
      })[0];

      if (!_lodash.default.isEmpty(lFilter)) setLabelV(lFilter.label);
    }
  }, [value, data]);
  (0, _react.useEffect)(() => {
    if (disabled) {
      setIconColor('lightgrey');
    }
  }, [disabled]);
  (0, _react.useEffect)(() => {
    if (isVisible && listRef) {
      listRef.current.flashScrollIndicators();
    }
  }, [isVisible]);
  (0, _react.useEffect)(() => {
    if (!disableSort) setOptions(_lodash.default.orderBy(data, ['label'], [defaultSortOrder]));else setOptions(data);
  }, [data, disableSort, defaultSortOrder]);
  (0, _react.useEffect)(() => {
    if (isVisible && selected) {
      const selectedIndex = _lodash.default.findIndex(options, {
        value: selected
      });

      if (selectedIndex >= 0 && listRef) {
        setTimeout(() => {
          listRef.current.scrollToIndex({
            animated: false,
            index: selectedIndex,
            viewPosition: _reactNative.Platform.OS === 'android' ? 0 : 0.5
          });
        }, 100);
      }
    }
  }, [selected, options, isVisible]);
  (0, _react.useEffect)(() => {
    if (required && error) {
      setError(true);
      setIconColor(errorColor);
    } else {
      setError(false);
      setIconColor('grey');
    }
  }, [required, error, errorColor]);

  const onTextInputFocus = () => {
    if (hasError) {
      setIconColor('red');
    } else {
      setIconColor(primaryColor);
    }

    pViewRef.current.measureInWindow((vx, vy, vWidth, vHeight) => {
      const ddTop = vy + vHeight;
      const bottomMetric = dimension.dh - vy;

      if (bottomMetric < 300) {
        setConMeasure({
          vx,
          vy: ddTop - 217,
          vWidth,
          vHeight
        });
      } else {
        setConMeasure({
          vx,
          vy: ddTop,
          vWidth,
          vHeight
        });
      }
    });
    setIsVisible(true);
  };

  const androidOnLayout = () => {
    if (_reactNative.Platform.OS === 'android') {
      pViewRef.current.measureInWindow((vx, vy, vWidth, vHeight) => {
        const ddTop = vy + vHeight;
        const bottomMetric = dimension.dh - vy;

        if (bottomMetric < 300) {
          setConMeasure({
            vx,
            vy: ddTop - 217,
            vWidth,
            vHeight
          });
        } else {
          setConMeasure({
            vx,
            vy: ddTop,
            vWidth,
            vHeight
          });
        }
      });
    }
  };

  const onModalBlur = () => {
    setIsVisible(false);

    if (hasError) {
      setIconColor('red');
    } else {
      setIconColor('grey');
    }

    if (onBlur && typeof onBlur === 'function') onBlur();
  };

  const handleOptionSelect = v => {
    const lFilter = _lodash.default.filter(data, {
      value: v
    })[0];

    if (!_lodash.default.isEmpty(lFilter)) setLabelV(lFilter.label);
    setSelected(v);

    if (onChange && typeof onChange === 'function') {
      onChange(v);
      setIsVisible(false);
    }

    if (hasError) {
      setIconColor('red');
    } else {
      setIconColor('grey');
    }

    setSearchQuery('');
    if (!disableSort) setOptions(_lodash.default.orderBy(data, ['label'], [defaultSortOrder]));else setOptions(data);
  };

  const onChangeSearch = query => {
    setSearchQuery(query);

    if (!_lodash.default.isEmpty(data) && query) {
      const lFilter = data.filter(opt => opt.label.toString().toLowerCase().trim().includes(query.toString().toLowerCase()));

      if (lFilter.length === 0) {
        setOptions([]);
      } else {
        setOptions(lFilter);
      }
    } else if (!_lodash.default.isEmpty(data) && !query && !disableSort) {
      setOptions(_lodash.default.sortBy(data, 'label'));
    } else setOptions(data);
  };

  const getEmptyComponent = () => {
    if (typeof emptyListText === 'string') return /*#__PURE__*/_react.default.createElement(_EmptyList.default, {
      emptyItemMessage: emptyListText
    });else return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, emptyListText);
  };

  const labelAction = () => {
    if (removeLabel) {
      return '';
    } else {
      return required ? "".concat(label, "*") : label;
    }
  };

  return /*#__PURE__*/_react.default.createElement(_reactNativePaper.Provider, {
    theme: paperTheme || theme
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_PressableTouch.default, {
    onPress: onTextInputFocus,
    disabled: disabled,
    rippleColor: rippleColor
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.fullWidth, mainContainerStyle],
    ref: pViewRef,
    onLayout: androidOnLayout,
    pointerEvents: "none"
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.TextInput, {
    label: labelAction(),
    placeholder: textInputPlaceholder,
    placeholderTextColor: textInputPlaceholderColor,
    value: labelv,
    style: [_styles.default.textInput, textInputStyle],
    underlineColor: underlineColor,
    underlineColorAndroid: underlineColor,
    editable: false,
    error: hasError,
    disabled: disabled,
    theme: {
      colors: {
        primary: primaryColor,
        error: errorColor
      },
      dark: false
    },
    right: /*#__PURE__*/_react.default.createElement(_reactNativePaper.TextInput.Icon, {
      name: "menu-down",
      size: 30,
      color: iconColor
    }),
    mode: mode
  })), required && hasError ? /*#__PURE__*/_react.default.createElement(_reactNativePaper.HelperText, {
    type: "error",
    theme: {
      colors: {
        error: errorColor
      }
    },
    visible: hasError
  }, helperText ? helperText : "".concat(label, " is required")) : null), /*#__PURE__*/_react.default.createElement(_reactNativeModal.default, {
    isVisible: isVisible,
    onBackdropPress: onModalBlur,
    backdropColor: floating ? 'rgba(0,0,0,0.1)' : 'transparent',
    style: _styles.default.modalStyle,
    animationIn: animationIn,
    animationOut: animationOut,
    animationInTiming: animationInTiming,
    animationOutTiming: animationOutTiming,
    supportedOrientations: supportedOrientations
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      backgroundColor: 'transparent',
      width: !floating ? contMeasure.vWidth : 'auto',
      left: !floating ? contMeasure.vx : 0,
      top: !floating ? contMeasure.vy : 100,
      right: 0,
      position: 'absolute',
      padding: floating ? 20 : 0
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Surface, {
    style: [_styles.default.surface, parentDDContainerStyle, {
      elevation,
      borderRadius
    }, floating ? {
      maxHeight: dimension.dh / 2
    } : null]
  }, showLoader ? /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.loader, {
      borderRadius
    }]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
    size: "small",
    color: activityIndicatorColor
  })) : null, /*#__PURE__*/_react.default.createElement(_reactNative.FlatList, {
    ref: listRef,
    data: options,
    initialNumToRender: 50 // maxToRenderPerBatch={25}
    ,
    persistentScrollbar: true,
    scrollEnabled: !showLoader,
    ListHeaderComponent: enableSearch ? /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Searchbar, {
      placeholder: searchPlaceholder,
      onChangeText: onChangeSearch,
      value: searchQuery,
      theme: {
        colors: {
          primary: primaryColor
        }
      },
      style: {
        elevation: 0,
        backgroundColor: showLoader ? 'transparent' : '#FFFFFF',
        height: _constants.ITEMLAYOUT
      }
    }), /*#__PURE__*/_react.default.createElement(_reactNativePaper.Divider, {
      style: _styles.default.divider
    })) : null,
    stickyHeaderIndices: enableSearch ? [0] : undefined,
    renderItem: ({
      item
    }) => /*#__PURE__*/_react.default.createElement(_Item.default, {
      item: item,
      onSelect: handleOptionSelect,
      selected: value,
      selectedColor: primaryColor,
      itemTextStyle: itemTextStyle,
      itemContainerStyle: itemContainerStyle,
      rippleColor: rippleColor,
      disabled: showLoader,
      enableAvatar: enableAvatar,
      avatarSize: avatarSize,
      disableSelectionTick: disableSelectionTick,
      selectedItemTextStyle: selectedItemTextStyle,
      selectedItemViewStyle: selectedItemViewStyle
    }),
    keyExtractor: () => Math.random().toString(),
    ItemSeparatorComponent: () => /*#__PURE__*/_react.default.createElement(_reactNativePaper.Divider, {
      style: _styles.default.divider
    }),
    getItemLayout: (_d, index) => ({
      length: _constants.ITEMLAYOUT,
      offset: _constants.ITEMLAYOUT * index,
      index
    }),
    ListEmptyComponent: getEmptyComponent()
  }))))));
};

Dropdown.defaultProps = _constants.defaultDropdownProps;
var _default = Dropdown;
exports.default = _default;
//# sourceMappingURL=index.js.map
{"version":3,"sources":["index.tsx"],"names":["React","useState","useRef","useEffect","TextInput","Surface","Divider","HelperText","Searchbar","Caption","Chip","Text","Avatar","Provider","PaperProvider","DefaultTheme","View","Dimensions","Platform","FlatList","ActivityIndicator","Modal","Lo","MultiselectItem","colors","defaultDropdownProps","ITEMLAYOUT","styles","deviceWidth","deviceHeight","EmptyList","PressableTouch","theme","roundness","primary","accent","background","surface","error","text","onBackground","onSurface","placeholder","disabled","dark","defaultAvatar","require","MultiselectDropdown","props","value","label","required","data","onChange","floating","enableSearch","primaryColor","elevation","borderRadius","activityIndicatorColor","searchPlaceholder","rippleColor","helperText","errorColor","itemTextStyle","itemContainerStyle","showLoader","animationIn","animationOut","supportedOrientations","animationInTiming","animationOutTiming","parentDDContainerStyle","emptyListText","disableSort","enableAvatar","avatarSize","defaultSortOrder","chipType","chipTextStyle","onBlur","emptySelectionText","paperTheme","textInputStyle","chipStyle","mainContainerStyle","underlineColor","disableSelectionTick","selectedItemTextStyle","selectedItemViewStyle","removeLabel","mode","selectedItems","setSelectedItems","labelv","setLabelV","isVisible","setIsVisible","iconColor","setIconColor","options","setOptions","hasError","setError","contMeasure","setConMeasure","vx","vy","vWidth","vHeight","dimension","setDimension","dw","dh","searchQuery","setSearchQuery","pViewRef","listRef","addEventListener","width","height","get","removeEventListener","isEmpty","length","filter","d","includes","current","flashScrollIndicators","orderBy","onTextInputFocus","measureInWindow","ddTop","bottomMetric","androidOnLayout","OS","onModalBlur","handleOptionSelect","v","remove","s","onChangeSearch","query","lFilter","opt","toString","toLowerCase","trim","sortBy","removeChip","rmV","getEmptyComponent","labelAction","fullWidth","textInput","chipScrollView","Math","random","item","chipWrapper","chip","borderColor","backgroundColor","textView","avatarView","avatarSource","modalStyle","left","top","right","position","padding","multiSelectSurface","maxHeight","loader","divider","undefined","_d","index","offset","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TextInput,\n  Surface,\n  Divider,\n  HelperText,\n  Searchbar,\n  Caption,\n  Chip,\n  Text,\n  Avatar,\n  Provider as PaperProvider,\n  DefaultTheme,\n} from 'react-native-paper';\nimport {\n  View,\n  Dimensions,\n  Platform,\n  FlatList,\n  ActivityIndicator,\n  // ScrollView,\n} from 'react-native';\nimport Modal from 'react-native-modal';\nimport Lo from 'lodash';\n\nimport MultiselectItem from '../Components/MultiselectItem';\nimport { colors, defaultDropdownProps, ITEMLAYOUT } from '../constants';\nimport type { IDropdownData, IMultiselectDropdownProps } from '../types';\nimport styles from '../styles';\nimport { deviceWidth, deviceHeight } from '../util';\nimport EmptyList from '../Components/EmptyList';\nimport PressableTouch from '../Components/PressableTouch';\n\nconst theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    colors: {\n      primary: '#6200ee',\n      accent: '#03dac4',\n      background: '#f6f6f6',\n      surface: '#FFFFFF',\n      error: '#B00020',\n      text: '#000000',\n      onBackground: '#000000',\n      onSurface: '#000000',\n      placeholder: 'rgba(0,0,0,0.54)',\n      disabled: 'rgba(0,0,0,0.26)',\n    },\n  },\n  dark: true,\n};\n\nconst defaultAvatar = require('../assets/ddicon.png');\n\nconst MultiselectDropdown: React.FC<IMultiselectDropdownProps> = props => {\n  const {\n    error,\n    value,\n    label,\n    required,\n    disabled,\n    data,\n    onChange,\n    floating,\n    enableSearch,\n    primaryColor = colors.primary,\n    elevation,\n    borderRadius,\n    activityIndicatorColor,\n    searchPlaceholder,\n    rippleColor,\n    helperText,\n    errorColor,\n    itemTextStyle,\n    itemContainerStyle,\n    showLoader,\n    animationIn = 'fadeIn',\n    animationOut = 'fadeOut',\n    supportedOrientations = ['portrait', 'landscape'],\n    animationInTiming,\n    animationOutTiming,\n    parentDDContainerStyle,\n    emptyListText,\n    disableSort,\n    enableAvatar,\n    avatarSize,\n    defaultSortOrder = 'asc',\n    chipType = 'flat',\n    chipTextStyle = {},\n    onBlur,\n    emptySelectionText,\n    paperTheme,\n    textInputStyle,\n    chipStyle = {},\n    mainContainerStyle,\n    underlineColor,\n    disableSelectionTick,\n    selectedItemTextStyle,\n    selectedItemViewStyle,\n    removeLabel,\n    mode = 'flat',\n  } = props;\n  // const [selected, setSelected] = useState<string[]>([]);\n  const [selectedItems, setSelectedItems] = useState<IDropdownData[]>([]);\n  const [labelv, setLabelV] = useState<string>('');\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const [iconColor, setIconColor] = useState<string | undefined>('grey');\n  const [options, setOptions] = useState<IDropdownData[]>([]);\n  const [hasError, setError] = useState<boolean>(false);\n  const [contMeasure, setConMeasure] = useState({\n    vx: 0,\n    vy: 0,\n    vWidth: 0,\n    vHeight: 0,\n  });\n  const [dimension, setDimension] = useState({\n    dw: deviceWidth,\n    dh: deviceHeight,\n  });\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const pViewRef = useRef<View | any>();\n  const listRef = useRef<FlatList | any>();\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', () => {\n      setIsVisible(false);\n      const { width, height } = Dimensions.get('window');\n      setDimension({ dw: width, dh: height });\n      setIconColor('grey');\n    });\n    return () => {\n      Dimensions.removeEventListener('change', () => {});\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!Lo.isEmpty(data) && value) {\n      setLabelV(`${value.length} selected`);\n      setSelectedItems(Lo.filter(data, d => value.includes(d.value)));\n    }\n  }, [value, data]);\n\n  useEffect(() => {\n    if (value) {\n      setLabelV(`${value.length} selected`);\n      setSelectedItems(Lo.filter(data, d => value.includes(d.value)));\n    }\n  }, [value, data]);\n\n  useEffect(() => {\n    if (disabled) {\n      setIconColor('lightgrey');\n    }\n  }, [disabled]);\n\n  useEffect(() => {\n    if (isVisible && listRef) {\n      listRef.current.flashScrollIndicators();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!disableSort)\n      setOptions(Lo.orderBy(data, ['label'], [defaultSortOrder]));\n    else setOptions(data);\n  }, [data, disableSort, defaultSortOrder]);\n\n  useEffect(() => {\n    if (required && error) {\n      setError(true);\n      setIconColor(errorColor);\n    } else {\n      setError(false);\n      setIconColor('grey');\n    }\n  }, [required, error, errorColor]);\n\n  const onTextInputFocus = () => {\n    if (hasError) {\n      setIconColor('red');\n    } else {\n      setIconColor(primaryColor);\n    }\n    pViewRef.current.measureInWindow(\n      (vx: number, vy: number, vWidth: number, vHeight: number) => {\n        const ddTop = vy + vHeight;\n        const bottomMetric = dimension.dh - vy;\n        if (bottomMetric < 300) {\n          setConMeasure({ vx, vy: ddTop - 217, vWidth, vHeight });\n        } else {\n          setConMeasure({\n            vx,\n            vy: ddTop,\n            vWidth,\n            vHeight,\n          });\n        }\n      }\n    );\n    setIsVisible(true);\n  };\n\n  const androidOnLayout = () => {\n    if (Platform.OS === 'android') {\n      pViewRef.current.measureInWindow(\n        (vx: number, vy: number, vWidth: number, vHeight: number) => {\n          const ddTop = vy + vHeight;\n          const bottomMetric = dimension.dh - vy;\n          if (bottomMetric < 300) {\n            setConMeasure({ vx, vy: ddTop - 217, vWidth, vHeight });\n          } else {\n            setConMeasure({ vx, vy: ddTop, vWidth, vHeight });\n          }\n        }\n      );\n    }\n  };\n\n  const onModalBlur = () => {\n    setIsVisible(false);\n    if (hasError) {\n      setIconColor('red');\n    } else {\n      setIconColor('grey');\n    }\n\n    if (onBlur && typeof onBlur === 'function') onBlur();\n  };\n\n  const handleOptionSelect = (v: string | number) => {\n    if (onChange && typeof onChange === 'function') {\n      if (value.includes(v)) {\n        onChange(Lo.remove(value, s => s !== v));\n      } else {\n        onChange([...value, v]);\n      }\n      if (hasError) {\n        setIconColor('red');\n      } else {\n        setIconColor('grey');\n      }\n    }\n    setSearchQuery('');\n    if (!disableSort)\n      setOptions(Lo.orderBy(data, ['label'], [defaultSortOrder]));\n    else setOptions(data);\n  };\n\n  const onChangeSearch = (query: string) => {\n    setSearchQuery(query);\n    if (!Lo.isEmpty(data) && query) {\n      const lFilter = data.filter(opt =>\n        opt.label\n          .toString()\n          .toLowerCase()\n          .trim()\n          .includes(query.toString().toLowerCase())\n      );\n      if (lFilter.length === 0) {\n        setOptions([]);\n      } else {\n        setOptions(lFilter);\n      }\n    } else if (!Lo.isEmpty(data) && !query && !disableSort) {\n      setOptions(Lo.sortBy(data, 'label'));\n    } else setOptions(data);\n  };\n\n  const removeChip = (rmV: string | number) => {\n    if (!showLoader) {\n      if (onChange && typeof onChange === 'function') {\n        onChange(Lo.remove(value, s => s !== rmV));\n      }\n    }\n  };\n\n  const getEmptyComponent = () => {\n    if (typeof emptyListText === 'string')\n      return <EmptyList emptyItemMessage={emptyListText} />;\n    else return <>{emptyListText}</>;\n  };\n\n  const labelAction = () => {\n    if (removeLabel) {\n      return '';\n    } else {\n      return required ? `${label}*` : label;\n    }\n  };\n\n  return (\n    <PaperProvider theme={paperTheme || theme}>\n      <View>\n        <PressableTouch\n          onPress={onTextInputFocus}\n          disabled={disabled}\n          rippleColor={rippleColor}\n        >\n          <View\n            style={[styles.fullWidth, mainContainerStyle]}\n            ref={pViewRef}\n            onLayout={androidOnLayout}\n            pointerEvents=\"none\"\n          >\n            <TextInput\n              label={labelAction()}\n              value={labelv}\n              style={[styles.textInput, textInputStyle]}\n              underlineColor={underlineColor}\n              underlineColorAndroid={underlineColor}\n              editable={false}\n              error={hasError}\n              disabled={disabled}\n              theme={{\n                colors: {\n                  primary: primaryColor,\n                  error: errorColor,\n                },\n              }}\n              right={\n                <TextInput.Icon name=\"menu-down\" size={30} color={iconColor} />\n              }\n              mode={mode}\n            />\n          </View>\n          {required && hasError ? (\n            <HelperText\n              type=\"error\"\n              theme={{ colors: { error: errorColor } }}\n              visible={hasError}\n            >\n              {helperText ? helperText : `${label} is required`}\n            </HelperText>\n          ) : null}\n        </PressableTouch>\n        <FlatList\n          data={selectedItems}\n          style={styles.chipScrollView}\n          horizontal\n          keyExtractor={() => Math.random().toString()}\n          renderItem={({ item }) => (\n            <View style={styles.chipWrapper}>\n              <Chip\n                mode={chipType}\n                style={[\n                  styles.chip,\n                  {\n                    borderColor: primaryColor,\n                    backgroundColor:\n                      chipType === 'flat' ? primaryColor : 'transparent',\n                  },\n                  chipStyle,\n                ]}\n                ellipsizeMode=\"tail\"\n                onClose={() => removeChip(item.value)}\n                avatar={\n                  enableAvatar && (\n                    <View style={styles.textView}>\n                      <Avatar.Image\n                        size={avatarSize}\n                        style={styles.avatarView}\n                        source={item.avatarSource || defaultAvatar}\n                      />\n                    </View>\n                  )\n                }\n              >\n                <Text style={chipTextStyle}>{item.label}</Text>\n              </Chip>\n            </View>\n          )}\n        />\n        <Modal\n          isVisible={isVisible}\n          onBackdropPress={onModalBlur}\n          backdropColor={floating ? 'rgba(0,0,0,0.1)' : 'transparent'}\n          style={styles.modalStyle}\n          animationIn={animationIn}\n          animationOut={animationOut}\n          animationInTiming={animationInTiming}\n          animationOutTiming={animationOutTiming}\n          supportedOrientations={supportedOrientations}\n        >\n          <View\n            style={{\n              backgroundColor: 'transparent',\n              width: !floating ? contMeasure.vWidth : 'auto',\n              left: !floating ? contMeasure.vx : 0,\n              top: !floating ? contMeasure.vy : 100,\n              right: 0,\n              position: 'absolute',\n              padding: floating ? 20 : 0,\n            }}\n          >\n            <Surface\n              style={[\n                styles.multiSelectSurface,\n                parentDDContainerStyle,\n                { elevation, borderRadius },\n                floating ? { maxHeight: dimension.dh / 2 } : null,\n              ]}\n            >\n              {showLoader ? (\n                <View style={[styles.loader, { borderRadius }]}>\n                  <ActivityIndicator\n                    size=\"small\"\n                    color={activityIndicatorColor}\n                  />\n                </View>\n              ) : null}\n              <View>\n                <FlatList\n                  data={selectedItems}\n                  style={styles.chipScrollView}\n                  horizontal\n                  keyExtractor={() => Math.random().toString()}\n                  renderItem={({ item }) => (\n                    <View style={styles.chipWrapper}>\n                      <Chip\n                        mode={chipType}\n                        style={[\n                          styles.chip,\n                          {\n                            borderColor: primaryColor,\n                            backgroundColor:\n                              chipType === 'flat'\n                                ? primaryColor\n                                : 'transparent',\n                          },\n                          chipStyle,\n                        ]}\n                        ellipsizeMode=\"tail\"\n                        avatar={\n                          enableAvatar && (\n                            <View style={styles.textView}>\n                              <Avatar.Image\n                                size={avatarSize}\n                                style={styles.avatarView}\n                                source={item.avatarSource || defaultAvatar}\n                              />\n                            </View>\n                          )\n                        }\n                        onClose={() => removeChip(item.value)}\n                      >\n                        <Text style={chipTextStyle}>{item.label}</Text>\n                      </Chip>\n                    </View>\n                  )}\n                  ListEmptyComponent={<Caption>{emptySelectionText}</Caption>}\n                />\n              </View>\n              <Divider style={styles.divider} />\n              <FlatList\n                ref={listRef}\n                data={options}\n                initialNumToRender={25}\n                maxToRenderPerBatch={25}\n                persistentScrollbar\n                scrollEnabled={!showLoader}\n                ListHeaderComponent={\n                  enableSearch ? (\n                    <View>\n                      <Searchbar\n                        placeholder={searchPlaceholder}\n                        onChangeText={onChangeSearch}\n                        value={searchQuery}\n                        theme={{ colors: { primary: primaryColor } }}\n                        style={{\n                          elevation: 0,\n                          backgroundColor: showLoader\n                            ? 'transparent'\n                            : '#FFFFFF',\n                          height: ITEMLAYOUT,\n                        }}\n                      />\n                      <Divider style={styles.divider} />\n                    </View>\n                  ) : null\n                }\n                stickyHeaderIndices={enableSearch ? [0] : undefined}\n                renderItem={({ item }) => (\n                  <MultiselectItem\n                    item={item}\n                    onSelect={handleOptionSelect}\n                    selected={value}\n                    selectedColor={primaryColor}\n                    itemTextStyle={itemTextStyle}\n                    itemContainerStyle={itemContainerStyle}\n                    rippleColor={rippleColor}\n                    disabled={showLoader}\n                    enableAvatar={enableAvatar}\n                    avatarSize={avatarSize}\n                    disableSelectionTick={disableSelectionTick}\n                    selectedItemTextStyle={selectedItemTextStyle}\n                    selectedItemViewStyle={selectedItemViewStyle}\n                  />\n                )}\n                keyExtractor={() => Math.random().toString()}\n                ItemSeparatorComponent={() => (\n                  <Divider style={styles.divider} />\n                )}\n                getItemLayout={(_d, index) => ({\n                  length: ITEMLAYOUT,\n                  offset: ITEMLAYOUT * index,\n                  index,\n                })}\n                ListEmptyComponent={getEmptyComponent()}\n              />\n            </Surface>\n          </View>\n        </Modal>\n      </View>\n    </PaperProvider>\n  );\n};\n\nMultiselectDropdown.defaultProps = defaultDropdownProps;\n\nexport default MultiselectDropdown;\n"]}